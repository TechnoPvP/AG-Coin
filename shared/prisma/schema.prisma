datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

model Tag {
  id Int @id @unique @default(autoincrement())
  name String @unique
  blog Blog[]
}

enum Role {
  ADMIN
  DEFAULT
}

model User {
  id Int @id @unique @default(autoincrement())
  email String @unique
  password String
  first_name String
  last_name String
  avatar String @default("https://agcoin.s3.amazonaws.com/user-avatars/default_profile_400x400.png")
  role Role @default(DEFAULT)
  phone String?
  feeds Feed[]
  feedComments FeedComment[]
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum Status {
  DRAFT
  PUBLISH
}

model Blog {
  id Int @id @unique @default(autoincrement())
  title String
  body String
  thumbnail String
  tags Tag[]
  difficulty Difficulty @default(EASY)
  status Status
  created_at DateTime @default(now())
}

model Feed {
  id Int @id @default(autoincrement())
  caption String
  thumbnail String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  created_at DateTime @default(now())
  comments FeedComment[]
}

model FeedComment {
  id Int @id @default(autoincrement())
  content String
  feed Feed @relation(fields: [feedId], references: [id], onDelete: Cascade)
  feedId Int
  user User @relation(fields: [userID], references: [id], onDelete: Cascade)
  userID Int
  created_at DateTime @default(now())
}

enum Topics {
  test1
  test2
  test3
  test4
}

model Support {
  id String @id @default(uuid())
  title String
  content String
  topics Topics[]
  @@unique([title, id], map: "title_id")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt   DateTime
}

